export const snapshot = {};

snapshot[`ifiokjr/templates/deno#9fdf5e0 passes without permissions 1`] = `
{
  ".github/workflows/ci.yml": "name: ci\\n\\non:\\n  push:\\n    branches:\\n      - main\\n\\n  pull_request:\\n    branches:\\n      - main\\n\\nenv:\\n  DENO_DIR: ../.deno_cache\\n\\njobs:\\n  test:\\n    strategy:\\n      matrix:\\n        deno: ['v1.x', 'canary']\\n        os:\\n          - macos-latest\\n          - ubuntu-latest\\n\\n    timeout-minutes: 5\\n    runs-on: \${{ matrix.os }}\\n\\n    steps:\\n      - name: 🏴‍☠️ Checkout\\n        uses: actions/checkout@v3\\n\\n      - name: 📦 Cache\\n        uses: actions/cache@v3\\n        with:\\n          path: \${{ env.DENO_DIR }}\\n          key: \${{ hashFiles('lock.json') }}-\${{ matrix.deno }}-\${{ matrix.os }}\\n\\n      - name: 🦕 Setup\\n        uses: denoland/setup-deno@v1.0.0\\n        with:\\n          deno-version: \${{ matrix.deno }}\\n\\n      - name: 🔒 Lock\\n        run: deno task lock\\n        shell: 'bash'\\n\\n      - name: 🩺 Format\\n        if: startsWith(matrix.os, 'ubuntu') && matrix.deno == 'canary'\\n        uses: dprint/check@v2.0\\n\\n      - name: 👩‍⚕️ Lint\\n        if: startsWith(matrix.os, 'ubuntu') && matrix.deno == 'canary'\\n        run: deno lint\\n\\n      - name: 🩺 Typecheck\\n        run: deno task typecheck\\n        shell: bash\\n\\n      - name: ✅ Unittest\\n        run: deno task test\\n\\n      - name: 📝 Docs\\n        run: deno task test:docs\\n",
  ".gitignore": "\\n# Created by https://www.toptal.com/developers/gitignore/api/Node\\n# Edit at https://www.toptal.com/developers/gitignore?templates=Node\\n\\n### Node ###\\n# Logs\\nlogs\\n*.log\\nnpm-debug.log*\\nyarn-debug.log*\\nyarn-error.log*\\nlerna-debug.log*\\n.pnpm-debug.log*\\n\\n# Diagnostic reports (https://nodejs.org/api/report.html)\\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\\n\\n# Runtime data\\npids\\n*.pid\\n*.seed\\n*.pid.lock\\n\\n# Directory for instrumented libs generated by jscoverage/JSCover\\nlib-cov\\n\\n# Coverage directory used by tools like istanbul\\ncoverage\\n*.lcov\\n\\n# nyc test coverage\\n.nyc_output\\n\\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\\n.grunt\\n\\n# Bower dependency directory (https://bower.io/)\\nbower_components\\n\\n# node-waf configuration\\n.lock-wscript\\n\\n# Compiled binary addons (https://nodejs.org/api/addons.html)\\nbuild/Release\\n\\n# Dependency directories\\nnode_modules/\\njspm_packages/\\n\\n# Snowpack dependency directory (https://snowpack.dev/)\\nweb_modules/\\n\\n# TypeScript cache\\n*.tsbuildinfo\\n\\n# Optional npm cache directory\\n.npm\\n\\n# Optional eslint cache\\n.eslintcache\\n\\n# Optional stylelint cache\\n.stylelintcache\\n\\n# Microbundle cache\\n.rpt2_cache/\\n.rts2_cache_cjs/\\n.rts2_cache_es/\\n.rts2_cache_umd/\\n\\n# Optional REPL history\\n.node_repl_history\\n\\n# Output of 'npm pack'\\n*.tgz\\n\\n# Yarn Integrity file\\n.yarn-integrity\\n\\n# dotenv environment variable files\\n.env\\n.env.development.local\\n.env.test.local\\n.env.production.local\\n.env.local\\n\\n# parcel-bundler cache (https://parceljs.org/)\\n.cache\\n.parcel-cache\\n\\n# Next.js build output\\n.next\\nout\\n\\n# Nuxt.js build / generate output\\n.nuxt\\ndist\\n\\n# Gatsby files\\n.cache/\\n# Comment in the public line in if your project uses Gatsby and not Next.js\\n# https://nextjs.org/blog/next-9-1#public-directory-support\\n# public\\n\\n# vuepress build output\\n.vuepress/dist\\n\\n# vuepress v2.x temp and cache directory\\n.temp\\n\\n# Docusaurus cache and generated files\\n.docusaurus\\n\\n# Serverless directories\\n.serverless/\\n\\n# FuseBox cache\\n.fusebox/\\n\\n# DynamoDB Local files\\n.dynamodb/\\n\\n# TernJS port file\\n.tern-port\\n\\n# Stores VSCode versions used for testing VSCode extensions\\n.vscode-test\\n\\n# yarn v2\\n.yarn/cache\\n.yarn/unplugged\\n.yarn/build-state.yml\\n.yarn/install-state.gz\\n.pnp.*\\n\\n### Node Patch ###\\n# Serverless Webpack directories\\n.webpack/\\n\\n# Optional stylelint cache\\n\\n# SvelteKit build / generate output\\n.svelte-kit\\n\\n# End of https://www.toptal.com/developers/gitignore/api/Node\\n\\ntmp.*\\ntmp**\\n**/tmp.*\\ntemp.*\\n**/temp.*\\n",
  ".vscode/extensions.json": '{\\n  "recommendations": ["dprint.dprint", "denoland.vscode-deno"],\\n  "unwantedRecommendations": []\\n}\\n',
  ".vscode/settings.json": '{\\n  "deno.enable": true,\\n  "deno.unstable": true,\\n  "deno.lint": true,\\n  "[markdown]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[typescript]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[typescriptreact]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[javascript]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[javascriptreact]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[json]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[jsonc]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[toml]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  }\\n}\\n',
  "deno.jsonc": '{\\n  "tasks": {\\n    "check": "deno task fix && deno task lint && deno task test && deno task test:docs && CI=true deno task lock",\\n    "fix": "dprint fmt",\\n    "lint": "deno lint",\\n    "lock:update": "deno run --allow-run=deno --allow-read scripts/cache.ts",\\n    "lock": "deno run --allow-run=deno --allow-env=CI --allow-read scripts/cache.ts --reload",\\n    "test:coverage": "deno test --coverage=coverage --unstable -A",\\n    "test:docs": "deno test --docs -A mod.ts readme.md",\\n    "test:snapshot": "deno test --unstable -A -- -u",\\n    "test:watch": "deno test --unstable -A --watch",\\n    "test": "deno test --unstable -A"\\n  },\\n  "compilerOptions": {\\n    "noUncheckedIndexedAccess": true\\n  },\\n  "lint": {\\n    "files": {\\n      "include": ["./"],\\n      "exclude": [\\n        "**/node_modules",\\n        "**/*-lock.json",\\n        "**/__fixtures__",\\n        "**/__snapshots__"\\n      ]\\n    },\\n    "rules": {\\n      "tags": ["recommended"],\\n      "include": [],\\n      "exclude": ["ban-types"]\\n    }\\n  }\\n}\\n',
  "dprint.json": '{\\n  "typescript": {\\n    "deno": true,\\n    "module.sortExportDeclarations": "caseInsensitive",\\n    "module.sortImportDeclarations": "caseInsensitive"\\n  },\\n  "json": {\\n    "deno": true\\n  },\\n  "markdown": {\\n    "deno": true,\\n    "textWrap": "never"\\n  },\\n  "toml": {},\\n  "includes": ["**/*.{ts,tsx,js,jsx,cjs,mjs,json,jsonc,md,toml,dockerfile}"],\\n  "excludes": [\\n    "**/node_modules",\\n    "**/*-lock.json",\\n    "**/__fixtures__",\\n    "**/__snapshots__"\\n  ],\\n  "plugins": [\\n    "https://plugins.dprint.dev/typescript-0.69.2.wasm",\\n    "https://plugins.dprint.dev/json-0.15.3.wasm",\\n    "https://plugins.dprint.dev/markdown-0.13.3.wasm",\\n    "https://plugins.dprint.dev/toml-0.5.4.wasm"\\n  ]\\n}\\n',
  license: 'MIT License\\n\\nCopyright (c) 2022 Awesome\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the "Software"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n',
  "mod.ts": "export {};\\n",
  "readme.md": "# Awesome\\n\\n> Brilliant | _created with [\`scaffold\`](https://github.com/ifiokjr/scaffold)_\\n\\n## Contributing\\n\\nTo contribute first update your cache with\\n\\n\`\`\`bash\\ndeno task lock\\n\`\`\`\\n\\nThis both generates the lockfile and makes sure the same cache is used for all contributors.\\n\\nTo check that all you code is working as expected, run:\\n\\n\`\`\`bash\\ndeno task check\\n\`\`\`\\n\\nThis will test, lint and check that formatting is correct.",
  "scripts/cache.ts": 'import { expandGlob, getLogger, parse } from "./deps.ts";\\n\\nconst decoder = new TextDecoder();\\nconst log = getLogger();\\nconst deps: string[] = [];\\nconst args = parse(Deno.args, { boolean: ["reload"] });\\nconst cwd = new URL("..", import.meta.url).pathname;\\nconst iterator = expandGlob("**/deps.ts", { includeDirs: false });\\n\\nfor await (const dep of iterator) {\\n  deps.push(dep.path);\\n}\\n\\nasync function update() {\\n  log.info("Updating the \`lock.json\` file.");\\n\\n  await Deno.run({\\n    cmd: ["deno", "cache", "--lock=lock.json", "--lock-write", ...deps],\\n    stdout: "piped",\\n    cwd,\\n  }).output();\\n}\\n\\nasync function load() {\\n  log.info("Loading the cache from \`lock.json\`.");\\n\\n  const command = Deno.run({\\n    cmd: ["deno", "cache", "--lock=lock.json", "--reload", ...deps],\\n    stdout: "piped",\\n    stderr: "piped",\\n    cwd,\\n  });\\n\\n  const [status, _, stderr] = await Promise.all([\\n    command.status(),\\n    command.output(),\\n    command.stderrOutput(),\\n  ]);\\n  command.close();\\n\\n  if (!status.success) {\\n    const error = decoder.decode(stderr);\\n\\n    if (error.includes("No such file or directory") && !Deno.env.get("CI")) {\\n      log.warning("No \`lock.json\` found. Creating a new one.");\\n      await update();\\n    } else {\\n      log.critical(\\n        "Error while reloading the cache.",\\n        error.split("error: ")[1],\\n      );\\n      Deno.exit(1);\\n    }\\n  }\\n}\\n\\nif (args.reload) {\\n  await load();\\n} else {\\n  await update();\\n}\\n',
  "scripts/deps.ts": 'export { parse } from "https://deno.land/std@0.145.0/flags/mod.ts";\\nexport * from "https://deno.land/std@0.145.0/fs/mod.ts";\\nexport { getLogger } from "https://deno.land/std@0.145.0/log/mod.ts";\\n',
  "src/deps.ts": "export {};\\n",
  "tests/deps.ts": 'export * from "https://deno.land/std@0.145.0/testing/asserts.ts";\\nexport * from "https://deno.land/std@0.145.0/testing/bdd.ts";\\nexport * from "https://deno.land/std@0.145.0/testing/mock.ts";\\nexport * from "https://deno.land/std@0.145.0/testing/snapshot.ts";\\n',
  "tests/mod_test.ts": "import { assertEquals, describe, it } from './deps.ts';\\n\\ndescribe('main', () => {\\n  it('should test', () => {\\n    assertEquals(1, 1);\\n  });\\n});\\n",
}
`;

snapshot[`ifiokjr/templates/deno#9fdf5e0 passes with permissions 1`] = `
{
  ".github/workflows/ci.yml": "name: ci\\n\\non:\\n  push:\\n    branches:\\n      - main\\n\\n  pull_request:\\n    branches:\\n      - main\\n\\nenv:\\n  DENO_DIR: ../.deno_cache\\n\\njobs:\\n  test:\\n    strategy:\\n      matrix:\\n        deno: ['v1.x', 'canary']\\n        os:\\n          - macos-latest\\n          - ubuntu-latest\\n\\n    timeout-minutes: 5\\n    runs-on: \${{ matrix.os }}\\n\\n    steps:\\n      - name: 🏴‍☠️ Checkout\\n        uses: actions/checkout@v3\\n\\n      - name: 📦 Cache\\n        uses: actions/cache@v3\\n        with:\\n          path: \${{ env.DENO_DIR }}\\n          key: \${{ hashFiles('lock.json') }}-\${{ matrix.deno }}-\${{ matrix.os }}\\n\\n      - name: 🦕 Setup\\n        uses: denoland/setup-deno@v1.0.0\\n        with:\\n          deno-version: \${{ matrix.deno }}\\n\\n      - name: 🔒 Lock\\n        run: deno task lock\\n        shell: 'bash'\\n\\n      - name: 🩺 Format\\n        if: startsWith(matrix.os, 'ubuntu') && matrix.deno == 'canary'\\n        uses: dprint/check@v2.0\\n\\n      - name: 👩‍⚕️ Lint\\n        if: startsWith(matrix.os, 'ubuntu') && matrix.deno == 'canary'\\n        run: deno lint\\n\\n      - name: 🩺 Typecheck\\n        run: deno task typecheck\\n        shell: bash\\n\\n      - name: ✅ Unittest\\n        run: deno task test\\n\\n      - name: 📝 Docs\\n        run: deno task test:docs\\n",
  ".gitignore": "\\n# Created by https://www.toptal.com/developers/gitignore/api/Node\\n# Edit at https://www.toptal.com/developers/gitignore?templates=Node\\n\\n### Node ###\\n# Logs\\nlogs\\n*.log\\nnpm-debug.log*\\nyarn-debug.log*\\nyarn-error.log*\\nlerna-debug.log*\\n.pnpm-debug.log*\\n\\n# Diagnostic reports (https://nodejs.org/api/report.html)\\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\\n\\n# Runtime data\\npids\\n*.pid\\n*.seed\\n*.pid.lock\\n\\n# Directory for instrumented libs generated by jscoverage/JSCover\\nlib-cov\\n\\n# Coverage directory used by tools like istanbul\\ncoverage\\n*.lcov\\n\\n# nyc test coverage\\n.nyc_output\\n\\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\\n.grunt\\n\\n# Bower dependency directory (https://bower.io/)\\nbower_components\\n\\n# node-waf configuration\\n.lock-wscript\\n\\n# Compiled binary addons (https://nodejs.org/api/addons.html)\\nbuild/Release\\n\\n# Dependency directories\\nnode_modules/\\njspm_packages/\\n\\n# Snowpack dependency directory (https://snowpack.dev/)\\nweb_modules/\\n\\n# TypeScript cache\\n*.tsbuildinfo\\n\\n# Optional npm cache directory\\n.npm\\n\\n# Optional eslint cache\\n.eslintcache\\n\\n# Optional stylelint cache\\n.stylelintcache\\n\\n# Microbundle cache\\n.rpt2_cache/\\n.rts2_cache_cjs/\\n.rts2_cache_es/\\n.rts2_cache_umd/\\n\\n# Optional REPL history\\n.node_repl_history\\n\\n# Output of 'npm pack'\\n*.tgz\\n\\n# Yarn Integrity file\\n.yarn-integrity\\n\\n# dotenv environment variable files\\n.env\\n.env.development.local\\n.env.test.local\\n.env.production.local\\n.env.local\\n\\n# parcel-bundler cache (https://parceljs.org/)\\n.cache\\n.parcel-cache\\n\\n# Next.js build output\\n.next\\nout\\n\\n# Nuxt.js build / generate output\\n.nuxt\\ndist\\n\\n# Gatsby files\\n.cache/\\n# Comment in the public line in if your project uses Gatsby and not Next.js\\n# https://nextjs.org/blog/next-9-1#public-directory-support\\n# public\\n\\n# vuepress build output\\n.vuepress/dist\\n\\n# vuepress v2.x temp and cache directory\\n.temp\\n\\n# Docusaurus cache and generated files\\n.docusaurus\\n\\n# Serverless directories\\n.serverless/\\n\\n# FuseBox cache\\n.fusebox/\\n\\n# DynamoDB Local files\\n.dynamodb/\\n\\n# TernJS port file\\n.tern-port\\n\\n# Stores VSCode versions used for testing VSCode extensions\\n.vscode-test\\n\\n# yarn v2\\n.yarn/cache\\n.yarn/unplugged\\n.yarn/build-state.yml\\n.yarn/install-state.gz\\n.pnp.*\\n\\n### Node Patch ###\\n# Serverless Webpack directories\\n.webpack/\\n\\n# Optional stylelint cache\\n\\n# SvelteKit build / generate output\\n.svelte-kit\\n\\n# End of https://www.toptal.com/developers/gitignore/api/Node\\n\\ntmp.*\\ntmp**\\n**/tmp.*\\ntemp.*\\n**/temp.*\\n",
  ".vscode/extensions.json": '{\\n  "recommendations": ["dprint.dprint", "denoland.vscode-deno"],\\n  "unwantedRecommendations": []\\n}\\n',
  ".vscode/settings.json": '{\\n  "deno.enable": true,\\n  "deno.unstable": true,\\n  "deno.lint": true,\\n  "[markdown]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[typescript]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[typescriptreact]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[javascript]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[javascriptreact]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[json]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[jsonc]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[toml]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  }\\n}\\n',
  "deno.jsonc": '{\\n  "tasks": {\\n    "check": "deno task fix && deno task lint && deno task test && deno task test:docs && CI=true deno task lock",\\n    "fix": "dprint fmt",\\n    "lint": "deno lint",\\n    "lock:update": "deno run --allow-run=deno --allow-read scripts/cache.ts",\\n    "lock": "deno run --allow-run=deno --allow-env=CI --allow-read scripts/cache.ts --reload",\\n    "test:coverage": "deno test --coverage=coverage --unstable -A",\\n    "test:docs": "deno test --docs -A mod.ts readme.md",\\n    "test:snapshot": "deno test --unstable -A -- -u",\\n    "test:watch": "deno test --unstable -A --watch",\\n    "test": "deno test --unstable -A"\\n  },\\n  "compilerOptions": {\\n    "noUncheckedIndexedAccess": true\\n  },\\n  "lint": {\\n    "files": {\\n      "include": ["./"],\\n      "exclude": [\\n        "**/node_modules",\\n        "**/*-lock.json",\\n        "**/__fixtures__",\\n        "**/__snapshots__"\\n      ]\\n    },\\n    "rules": {\\n      "tags": ["recommended"],\\n      "include": [],\\n      "exclude": ["ban-types"]\\n    }\\n  }\\n}\\n',
  "dprint.json": '{\\n  "typescript": {\\n    "deno": true,\\n    "module.sortExportDeclarations": "caseInsensitive",\\n    "module.sortImportDeclarations": "caseInsensitive"\\n  },\\n  "json": {\\n    "deno": true\\n  },\\n  "markdown": {\\n    "deno": true,\\n    "textWrap": "never"\\n  },\\n  "toml": {},\\n  "includes": ["**/*.{ts,tsx,js,jsx,cjs,mjs,json,jsonc,md,toml,dockerfile}"],\\n  "excludes": [\\n    "**/node_modules",\\n    "**/*-lock.json",\\n    "**/__fixtures__",\\n    "**/__snapshots__"\\n  ],\\n  "plugins": [\\n    "https://plugins.dprint.dev/typescript-0.69.2.wasm",\\n    "https://plugins.dprint.dev/json-0.15.3.wasm",\\n    "https://plugins.dprint.dev/markdown-0.13.3.wasm",\\n    "https://plugins.dprint.dev/toml-0.5.4.wasm"\\n  ]\\n}\\n',
  license: 'MIT License\\n\\nCopyright (c) 2022 WithPermissions\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the "Software"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n',
  "lock.json": '{\\n  "https://deno.land/std@0.145.0/_deno_unstable.ts": "be3276fd42cffb49f51b705c4b0aa8656aaf2a34be22d769455c8e50ea38e51a",\\n  "https://deno.land/std@0.145.0/_util/assert.ts": "e94f2eb37cebd7f199952e242c77654e43333c1ac4c5c700e929ea3aa5489f74",\\n  "https://deno.land/std@0.145.0/_util/os.ts": "3b4c6e27febd119d36a416d7a97bd3b0251b77c88942c8f16ee5953ea13e2e49",\\n  "https://deno.land/std@0.145.0/bytes/bytes_list.ts": "aba5e2369e77d426b10af1de0dcc4531acecec27f9b9056f4f7bfbf8ac147ab4",\\n  "https://deno.land/std@0.145.0/bytes/equals.ts": "3c3558c3ae85526f84510aa2b48ab2ad7bdd899e2e0f5b7a8ffc85acb3a6043a",\\n  "https://deno.land/std@0.145.0/bytes/mod.ts": "763f97d33051cc3f28af1a688dfe2830841192a9fea0cbaa55f927b49d49d0bf",\\n  "https://deno.land/std@0.145.0/flags/mod.ts": "387fd528c1c518eec8eb58ae886b15d3dabab27985e55e886c10ae37a540c6ee",\\n  "https://deno.land/std@0.145.0/fmt/colors.ts": "6f9340b7fb8cc25a993a99e5efc56fe81bb5af284ff412129dd06df06f53c0b4",\\n  "https://deno.land/std@0.145.0/fs/_util.ts": "2cf50bfb1081c2d5f2efec10ac19abbc2baf478e51cd1b057d0da2f30585b6ba",\\n  "https://deno.land/std@0.145.0/fs/copy.ts": "9248d1492599957af8c693ceb10a432b09f0b0b61c60a4d6aff29b0c7d3a17b3",\\n  "https://deno.land/std@0.145.0/fs/empty_dir.ts": "7274d87160de34cbed0531e284df383045cf43543bbeadeb97feac598bd8f3c5",\\n  "https://deno.land/std@0.145.0/fs/ensure_dir.ts": "9dc109c27df4098b9fc12d949612ae5c9c7169507660dcf9ad90631833209d9d",\\n  "https://deno.land/std@0.145.0/fs/ensure_file.ts": "7d353e64fee3d4d1e7c6b6726a2a5e987ba402c15fb49566309042887349c545",\\n  "https://deno.land/std@0.145.0/fs/ensure_link.ts": "489e23df9fe3e6636048b5830ddf0f111eb29621eb85719255ad9bd645f3471b",\\n  "https://deno.land/std@0.145.0/fs/ensure_symlink.ts": "88dc83de1bc90ed883dd458c2d2eae3d5834a4617d12925734836e1f0803b274",\\n  "https://deno.land/std@0.145.0/fs/eol.ts": "b92f0b88036de507e7e6fbedbe8f666835ea9dcbf5ac85917fa1fadc919f83a5",\\n  "https://deno.land/std@0.145.0/fs/exists.ts": "cb734d872f8554ea40b8bff77ad33d4143c1187eac621a55bf37781a43c56f6d",\\n  "https://deno.land/std@0.145.0/fs/expand_glob.ts": "143400698822117018c3646f4b7d2d418bc5cdede1ec837a8c70013b7711c761",\\n  "https://deno.land/std@0.145.0/fs/mod.ts": "4dc052c461c171abb5c25f6e0f218ab838a716230930b534ba351745864b7d6d",\\n  "https://deno.land/std@0.145.0/fs/move.ts": "0573cedcf583f09a9494f2dfccbf67de68a93629942d6b5e6e74a9e45d4e8a2e",\\n  "https://deno.land/std@0.145.0/fs/walk.ts": "6ce8d87fbaeda23383e979599ad27f3f94b3e5ff0c0cd976b5fc5c2aa0df7d92",\\n  "https://deno.land/std@0.145.0/io/buffer.ts": "bd0c4bf53db4b4be916ca5963e454bddfd3fcd45039041ea161dbf826817822b",\\n  "https://deno.land/std@0.145.0/io/types.d.ts": "0cae3a62da7a37043661746c65c021058bae020b54e50c0e774916e5d4baee43",\\n  "https://deno.land/std@0.145.0/log/handlers.ts": "b88c24df61eaeee8581dbef3622f21aebfd061cd2fda49affc1711c0e54d57da",\\n  "https://deno.land/std@0.145.0/log/levels.ts": "82c965b90f763b5313e7595d4ba78d5095a13646d18430ebaf547526131604d1",\\n  "https://deno.land/std@0.145.0/log/logger.ts": "4d25581bc02dfbe3ad7e8bb480e1f221793a85be5e056185a0cea134f7a7fdf4",\\n  "https://deno.land/std@0.145.0/log/mod.ts": "65d2702785714b8d41061426b5c279f11b3dcbc716f3eb5384372a430af63961",\\n  "https://deno.land/std@0.145.0/path/_constants.ts": "df1db3ffa6dd6d1252cc9617e5d72165cd2483df90e93833e13580687b6083c3",\\n  "https://deno.land/std@0.145.0/path/_interface.ts": "ee3b431a336b80cf445441109d089b70d87d5e248f4f90ff906820889ecf8d09",\\n  "https://deno.land/std@0.145.0/path/_util.ts": "c1e9686d0164e29f7d880b2158971d805b6e0efc3110d0b3e24e4b8af2190d2b",\\n  "https://deno.land/std@0.145.0/path/common.ts": "bee563630abd2d97f99d83c96c2fa0cca7cee103e8cb4e7699ec4d5db7bd2633",\\n  "https://deno.land/std@0.145.0/path/glob.ts": "cb5255638de1048973c3e69e420c77dc04f75755524cb3b2e160fe9277d939ee",\\n  "https://deno.land/std@0.145.0/path/mod.ts": "4945b430b759b0b3d98f2a278542cbcf95e0ad2bd8eaaed3c67322b306b2b346",\\n  "https://deno.land/std@0.145.0/path/posix.ts": "c1f7afe274290ea0b51da07ee205653b2964bd74909a82deb07b69a6cc383aaa",\\n  "https://deno.land/std@0.145.0/path/separator.ts": "fe1816cb765a8068afb3e8f13ad272351c85cbc739af56dacfc7d93d710fe0f9",\\n  "https://deno.land/std@0.145.0/path/win32.ts": "bd7549042e37879c68ff2f8576a25950abbfca1d696d41d82c7bca0b7e6f452c",\\n  "https://deno.land/std@0.145.0/testing/_diff.ts": "029a00560b0d534bc0046f1bce4bd36b3b41ada3f2a3178c85686eb2ff5f1413",\\n  "https://deno.land/std@0.145.0/testing/_format.ts": "0d8dc79eab15b67cdc532826213bbe05bccfd276ca473a50a3fc7bbfb7260642",\\n  "https://deno.land/std@0.145.0/testing/_test_suite.ts": "ad453767aeb8c300878a6b7920e20370f4ce92a7b6c8e8a5d1ac2b7c14a09acb",\\n  "https://deno.land/std@0.145.0/testing/asserts.ts": "319df43e1e6bba2520508f6090a21a9a640cbe2754d255aee17cd1dfa78c2ff6",\\n  "https://deno.land/std@0.145.0/testing/bdd.ts": "182bb823e09bd75b76063ecf50722870101b7cfadf97a09fa29127279dc21128",\\n  "https://deno.land/std@0.145.0/testing/mock.ts": "d9630b551fe59a81b3c214c1a6ccb67819b6e34fc20e3424a659528fe1f572c1",\\n  "https://deno.land/std@0.145.0/testing/snapshot.ts": "11303bb714d8eb17c0a58e585290a61d289f09a67d8da66595ef9ea6141891a8"\\n}\\n',
  "mod.ts": "export {};\\n",
  "readme.md": "# WithPermissions\\n\\n> This is the best thing to know! | _created with [\`scaffold\`](https://github.com/ifiokjr/scaffold)_\\n\\n## Contributing\\n\\nTo contribute first update your cache with\\n\\n\`\`\`bash\\ndeno task lock\\n\`\`\`\\n\\nThis both generates the lockfile and makes sure the same cache is used for all contributors.\\n\\nTo check that all you code is working as expected, run:\\n\\n\`\`\`bash\\ndeno task check\\n\`\`\`\\n\\nThis will test, lint and check that formatting is correct.",
  "scripts/cache.ts": 'import { expandGlob, getLogger, parse } from "./deps.ts";\\n\\nconst decoder = new TextDecoder();\\nconst log = getLogger();\\nconst deps: string[] = [];\\nconst args = parse(Deno.args, { boolean: ["reload"] });\\nconst cwd = new URL("..", import.meta.url).pathname;\\nconst iterator = expandGlob("**/deps.ts", { includeDirs: false });\\n\\nfor await (const dep of iterator) {\\n  deps.push(dep.path);\\n}\\n\\nasync function update() {\\n  log.info("Updating the \`lock.json\` file.");\\n\\n  await Deno.run({\\n    cmd: ["deno", "cache", "--lock=lock.json", "--lock-write", ...deps],\\n    stdout: "piped",\\n    cwd,\\n  }).output();\\n}\\n\\nasync function load() {\\n  log.info("Loading the cache from \`lock.json\`.");\\n\\n  const command = Deno.run({\\n    cmd: ["deno", "cache", "--lock=lock.json", "--reload", ...deps],\\n    stdout: "piped",\\n    stderr: "piped",\\n    cwd,\\n  });\\n\\n  const [status, _, stderr] = await Promise.all([\\n    command.status(),\\n    command.output(),\\n    command.stderrOutput(),\\n  ]);\\n  command.close();\\n\\n  if (!status.success) {\\n    const error = decoder.decode(stderr);\\n\\n    if (error.includes("No such file or directory") && !Deno.env.get("CI")) {\\n      log.warning("No \`lock.json\` found. Creating a new one.");\\n      await update();\\n    } else {\\n      log.critical(\\n        "Error while reloading the cache.",\\n        error.split("error: ")[1],\\n      );\\n      Deno.exit(1);\\n    }\\n  }\\n}\\n\\nif (args.reload) {\\n  await load();\\n} else {\\n  await update();\\n}\\n',
  "scripts/deps.ts": 'export { parse } from "https://deno.land/std@0.145.0/flags/mod.ts";\\nexport * from "https://deno.land/std@0.145.0/fs/mod.ts";\\nexport { getLogger } from "https://deno.land/std@0.145.0/log/mod.ts";\\n',
  "src/deps.ts": "export {};\\n",
  "tests/deps.ts": 'export * from "https://deno.land/std@0.145.0/testing/asserts.ts";\\nexport * from "https://deno.land/std@0.145.0/testing/bdd.ts";\\nexport * from "https://deno.land/std@0.145.0/testing/mock.ts";\\nexport * from "https://deno.land/std@0.145.0/testing/snapshot.ts";\\n',
  "tests/mod_test.ts": "import { assertEquals, describe, it } from './deps.ts';\\n\\ndescribe('main', () => {\\n  it('should test', () => {\\n    assertEquals(1, 1);\\n  });\\n});\\n",
}
`;

snapshot[`can create aliases 1`] = `
{
  ".github/workflows/ci.yml": "name: ci\\n\\non:\\n  push:\\n    branches:\\n      - main\\n\\n  pull_request:\\n    branches:\\n      - main\\n\\nenv:\\n  DENO_DIR: ../.deno_cache\\n\\njobs:\\n  test:\\n    strategy:\\n      matrix:\\n        deno: ['v1.x', 'canary']\\n        os:\\n          - macos-latest\\n          - ubuntu-latest\\n\\n    timeout-minutes: 5\\n    runs-on: \${{ matrix.os }}\\n\\n    steps:\\n      - name: 🏴‍☠️ Checkout\\n        uses: actions/checkout@v3\\n\\n      - name: 📦 Cache\\n        uses: actions/cache@v3\\n        with:\\n          path: \${{ env.DENO_DIR }}\\n          key: \${{ hashFiles('lock.json') }}-\${{ matrix.deno }}-\${{ matrix.os }}\\n\\n      - name: 🦕 Setup\\n        uses: denoland/setup-deno@v1.0.0\\n        with:\\n          deno-version: \${{ matrix.deno }}\\n\\n      - name: 🔒 Lock\\n        run: deno task lock\\n        shell: 'bash'\\n\\n      - name: 🩺 Format\\n        if: startsWith(matrix.os, 'ubuntu') && matrix.deno == 'canary'\\n        uses: dprint/check@v2.0\\n\\n      - name: 👩‍⚕️ Lint\\n        if: startsWith(matrix.os, 'ubuntu') && matrix.deno == 'canary'\\n        run: deno lint\\n\\n      - name: 🩺 Typecheck\\n        run: deno task typecheck\\n        shell: bash\\n\\n      - name: ✅ Unittest\\n        run: deno task test\\n\\n      - name: 📝 Docs\\n        run: deno task test:docs\\n",
  ".gitignore": "\\n# Created by https://www.toptal.com/developers/gitignore/api/Node\\n# Edit at https://www.toptal.com/developers/gitignore?templates=Node\\n\\n### Node ###\\n# Logs\\nlogs\\n*.log\\nnpm-debug.log*\\nyarn-debug.log*\\nyarn-error.log*\\nlerna-debug.log*\\n.pnpm-debug.log*\\n\\n# Diagnostic reports (https://nodejs.org/api/report.html)\\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\\n\\n# Runtime data\\npids\\n*.pid\\n*.seed\\n*.pid.lock\\n\\n# Directory for instrumented libs generated by jscoverage/JSCover\\nlib-cov\\n\\n# Coverage directory used by tools like istanbul\\ncoverage\\n*.lcov\\n\\n# nyc test coverage\\n.nyc_output\\n\\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\\n.grunt\\n\\n# Bower dependency directory (https://bower.io/)\\nbower_components\\n\\n# node-waf configuration\\n.lock-wscript\\n\\n# Compiled binary addons (https://nodejs.org/api/addons.html)\\nbuild/Release\\n\\n# Dependency directories\\nnode_modules/\\njspm_packages/\\n\\n# Snowpack dependency directory (https://snowpack.dev/)\\nweb_modules/\\n\\n# TypeScript cache\\n*.tsbuildinfo\\n\\n# Optional npm cache directory\\n.npm\\n\\n# Optional eslint cache\\n.eslintcache\\n\\n# Optional stylelint cache\\n.stylelintcache\\n\\n# Microbundle cache\\n.rpt2_cache/\\n.rts2_cache_cjs/\\n.rts2_cache_es/\\n.rts2_cache_umd/\\n\\n# Optional REPL history\\n.node_repl_history\\n\\n# Output of 'npm pack'\\n*.tgz\\n\\n# Yarn Integrity file\\n.yarn-integrity\\n\\n# dotenv environment variable files\\n.env\\n.env.development.local\\n.env.test.local\\n.env.production.local\\n.env.local\\n\\n# parcel-bundler cache (https://parceljs.org/)\\n.cache\\n.parcel-cache\\n\\n# Next.js build output\\n.next\\nout\\n\\n# Nuxt.js build / generate output\\n.nuxt\\ndist\\n\\n# Gatsby files\\n.cache/\\n# Comment in the public line in if your project uses Gatsby and not Next.js\\n# https://nextjs.org/blog/next-9-1#public-directory-support\\n# public\\n\\n# vuepress build output\\n.vuepress/dist\\n\\n# vuepress v2.x temp and cache directory\\n.temp\\n\\n# Docusaurus cache and generated files\\n.docusaurus\\n\\n# Serverless directories\\n.serverless/\\n\\n# FuseBox cache\\n.fusebox/\\n\\n# DynamoDB Local files\\n.dynamodb/\\n\\n# TernJS port file\\n.tern-port\\n\\n# Stores VSCode versions used for testing VSCode extensions\\n.vscode-test\\n\\n# yarn v2\\n.yarn/cache\\n.yarn/unplugged\\n.yarn/build-state.yml\\n.yarn/install-state.gz\\n.pnp.*\\n\\n### Node Patch ###\\n# Serverless Webpack directories\\n.webpack/\\n\\n# Optional stylelint cache\\n\\n# SvelteKit build / generate output\\n.svelte-kit\\n\\n# End of https://www.toptal.com/developers/gitignore/api/Node\\n\\ntmp.*\\ntmp**\\n**/tmp.*\\ntemp.*\\n**/temp.*\\n",
  ".vscode/extensions.json": '{\\n  "recommendations": ["dprint.dprint", "denoland.vscode-deno"],\\n  "unwantedRecommendations": []\\n}\\n',
  ".vscode/settings.json": '{\\n  "deno.enable": true,\\n  "deno.unstable": true,\\n  "deno.lint": true,\\n  "[markdown]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[typescript]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[typescriptreact]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[javascript]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[javascriptreact]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[json]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[jsonc]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  },\\n  "[toml]": {\\n    "editor.defaultFormatter": "dprint.dprint"\\n  }\\n}\\n',
  "deno.jsonc": '{\\n  "tasks": {\\n    "check": "deno task fix && deno task lint && deno task test && deno task test:docs && CI=true deno task lock",\\n    "fix": "dprint fmt",\\n    "lint": "deno lint",\\n    "lock:update": "deno run --allow-run=deno --allow-read scripts/cache.ts",\\n    "lock": "deno run --allow-run=deno --allow-env=CI --allow-read scripts/cache.ts --reload",\\n    "test:coverage": "deno test --coverage=coverage --unstable -A",\\n    "test:docs": "deno test --docs -A mod.ts readme.md",\\n    "test:snapshot": "deno test --unstable -A -- -u",\\n    "test:watch": "deno test --unstable -A --watch",\\n    "test": "deno test --unstable -A"\\n  },\\n  "compilerOptions": {\\n    "noUncheckedIndexedAccess": true\\n  },\\n  "lint": {\\n    "files": {\\n      "include": ["./"],\\n      "exclude": [\\n        "**/node_modules",\\n        "**/*-lock.json",\\n        "**/__fixtures__",\\n        "**/__snapshots__"\\n      ]\\n    },\\n    "rules": {\\n      "tags": ["recommended"],\\n      "include": [],\\n      "exclude": ["ban-types"]\\n    }\\n  }\\n}\\n',
  "dprint.json": '{\\n  "typescript": {\\n    "deno": true,\\n    "module.sortExportDeclarations": "caseInsensitive",\\n    "module.sortImportDeclarations": "caseInsensitive"\\n  },\\n  "json": {\\n    "deno": true\\n  },\\n  "markdown": {\\n    "deno": true,\\n    "textWrap": "never"\\n  },\\n  "toml": {},\\n  "includes": ["**/*.{ts,tsx,js,jsx,cjs,mjs,json,jsonc,md,toml,dockerfile}"],\\n  "excludes": [\\n    "**/node_modules",\\n    "**/*-lock.json",\\n    "**/__fixtures__",\\n    "**/__snapshots__"\\n  ],\\n  "plugins": [\\n    "https://plugins.dprint.dev/typescript-0.69.2.wasm",\\n    "https://plugins.dprint.dev/json-0.15.3.wasm",\\n    "https://plugins.dprint.dev/markdown-0.13.3.wasm",\\n    "https://plugins.dprint.dev/toml-0.5.4.wasm"\\n  ]\\n}\\n',
  license: 'MIT License\\n\\nCopyright (c) 2022 WithPermissions\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the "Software"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n',
  "lock.json": '{\\n  "https://deno.land/std@0.145.0/_deno_unstable.ts": "be3276fd42cffb49f51b705c4b0aa8656aaf2a34be22d769455c8e50ea38e51a",\\n  "https://deno.land/std@0.145.0/_util/assert.ts": "e94f2eb37cebd7f199952e242c77654e43333c1ac4c5c700e929ea3aa5489f74",\\n  "https://deno.land/std@0.145.0/_util/os.ts": "3b4c6e27febd119d36a416d7a97bd3b0251b77c88942c8f16ee5953ea13e2e49",\\n  "https://deno.land/std@0.145.0/bytes/bytes_list.ts": "aba5e2369e77d426b10af1de0dcc4531acecec27f9b9056f4f7bfbf8ac147ab4",\\n  "https://deno.land/std@0.145.0/bytes/equals.ts": "3c3558c3ae85526f84510aa2b48ab2ad7bdd899e2e0f5b7a8ffc85acb3a6043a",\\n  "https://deno.land/std@0.145.0/bytes/mod.ts": "763f97d33051cc3f28af1a688dfe2830841192a9fea0cbaa55f927b49d49d0bf",\\n  "https://deno.land/std@0.145.0/flags/mod.ts": "387fd528c1c518eec8eb58ae886b15d3dabab27985e55e886c10ae37a540c6ee",\\n  "https://deno.land/std@0.145.0/fmt/colors.ts": "6f9340b7fb8cc25a993a99e5efc56fe81bb5af284ff412129dd06df06f53c0b4",\\n  "https://deno.land/std@0.145.0/fs/_util.ts": "2cf50bfb1081c2d5f2efec10ac19abbc2baf478e51cd1b057d0da2f30585b6ba",\\n  "https://deno.land/std@0.145.0/fs/copy.ts": "9248d1492599957af8c693ceb10a432b09f0b0b61c60a4d6aff29b0c7d3a17b3",\\n  "https://deno.land/std@0.145.0/fs/empty_dir.ts": "7274d87160de34cbed0531e284df383045cf43543bbeadeb97feac598bd8f3c5",\\n  "https://deno.land/std@0.145.0/fs/ensure_dir.ts": "9dc109c27df4098b9fc12d949612ae5c9c7169507660dcf9ad90631833209d9d",\\n  "https://deno.land/std@0.145.0/fs/ensure_file.ts": "7d353e64fee3d4d1e7c6b6726a2a5e987ba402c15fb49566309042887349c545",\\n  "https://deno.land/std@0.145.0/fs/ensure_link.ts": "489e23df9fe3e6636048b5830ddf0f111eb29621eb85719255ad9bd645f3471b",\\n  "https://deno.land/std@0.145.0/fs/ensure_symlink.ts": "88dc83de1bc90ed883dd458c2d2eae3d5834a4617d12925734836e1f0803b274",\\n  "https://deno.land/std@0.145.0/fs/eol.ts": "b92f0b88036de507e7e6fbedbe8f666835ea9dcbf5ac85917fa1fadc919f83a5",\\n  "https://deno.land/std@0.145.0/fs/exists.ts": "cb734d872f8554ea40b8bff77ad33d4143c1187eac621a55bf37781a43c56f6d",\\n  "https://deno.land/std@0.145.0/fs/expand_glob.ts": "143400698822117018c3646f4b7d2d418bc5cdede1ec837a8c70013b7711c761",\\n  "https://deno.land/std@0.145.0/fs/mod.ts": "4dc052c461c171abb5c25f6e0f218ab838a716230930b534ba351745864b7d6d",\\n  "https://deno.land/std@0.145.0/fs/move.ts": "0573cedcf583f09a9494f2dfccbf67de68a93629942d6b5e6e74a9e45d4e8a2e",\\n  "https://deno.land/std@0.145.0/fs/walk.ts": "6ce8d87fbaeda23383e979599ad27f3f94b3e5ff0c0cd976b5fc5c2aa0df7d92",\\n  "https://deno.land/std@0.145.0/io/buffer.ts": "bd0c4bf53db4b4be916ca5963e454bddfd3fcd45039041ea161dbf826817822b",\\n  "https://deno.land/std@0.145.0/io/types.d.ts": "0cae3a62da7a37043661746c65c021058bae020b54e50c0e774916e5d4baee43",\\n  "https://deno.land/std@0.145.0/log/handlers.ts": "b88c24df61eaeee8581dbef3622f21aebfd061cd2fda49affc1711c0e54d57da",\\n  "https://deno.land/std@0.145.0/log/levels.ts": "82c965b90f763b5313e7595d4ba78d5095a13646d18430ebaf547526131604d1",\\n  "https://deno.land/std@0.145.0/log/logger.ts": "4d25581bc02dfbe3ad7e8bb480e1f221793a85be5e056185a0cea134f7a7fdf4",\\n  "https://deno.land/std@0.145.0/log/mod.ts": "65d2702785714b8d41061426b5c279f11b3dcbc716f3eb5384372a430af63961",\\n  "https://deno.land/std@0.145.0/path/_constants.ts": "df1db3ffa6dd6d1252cc9617e5d72165cd2483df90e93833e13580687b6083c3",\\n  "https://deno.land/std@0.145.0/path/_interface.ts": "ee3b431a336b80cf445441109d089b70d87d5e248f4f90ff906820889ecf8d09",\\n  "https://deno.land/std@0.145.0/path/_util.ts": "c1e9686d0164e29f7d880b2158971d805b6e0efc3110d0b3e24e4b8af2190d2b",\\n  "https://deno.land/std@0.145.0/path/common.ts": "bee563630abd2d97f99d83c96c2fa0cca7cee103e8cb4e7699ec4d5db7bd2633",\\n  "https://deno.land/std@0.145.0/path/glob.ts": "cb5255638de1048973c3e69e420c77dc04f75755524cb3b2e160fe9277d939ee",\\n  "https://deno.land/std@0.145.0/path/mod.ts": "4945b430b759b0b3d98f2a278542cbcf95e0ad2bd8eaaed3c67322b306b2b346",\\n  "https://deno.land/std@0.145.0/path/posix.ts": "c1f7afe274290ea0b51da07ee205653b2964bd74909a82deb07b69a6cc383aaa",\\n  "https://deno.land/std@0.145.0/path/separator.ts": "fe1816cb765a8068afb3e8f13ad272351c85cbc739af56dacfc7d93d710fe0f9",\\n  "https://deno.land/std@0.145.0/path/win32.ts": "bd7549042e37879c68ff2f8576a25950abbfca1d696d41d82c7bca0b7e6f452c",\\n  "https://deno.land/std@0.145.0/testing/_diff.ts": "029a00560b0d534bc0046f1bce4bd36b3b41ada3f2a3178c85686eb2ff5f1413",\\n  "https://deno.land/std@0.145.0/testing/_format.ts": "0d8dc79eab15b67cdc532826213bbe05bccfd276ca473a50a3fc7bbfb7260642",\\n  "https://deno.land/std@0.145.0/testing/_test_suite.ts": "ad453767aeb8c300878a6b7920e20370f4ce92a7b6c8e8a5d1ac2b7c14a09acb",\\n  "https://deno.land/std@0.145.0/testing/asserts.ts": "319df43e1e6bba2520508f6090a21a9a640cbe2754d255aee17cd1dfa78c2ff6",\\n  "https://deno.land/std@0.145.0/testing/bdd.ts": "182bb823e09bd75b76063ecf50722870101b7cfadf97a09fa29127279dc21128",\\n  "https://deno.land/std@0.145.0/testing/mock.ts": "d9630b551fe59a81b3c214c1a6ccb67819b6e34fc20e3424a659528fe1f572c1",\\n  "https://deno.land/std@0.145.0/testing/snapshot.ts": "11303bb714d8eb17c0a58e585290a61d289f09a67d8da66595ef9ea6141891a8"\\n}\\n',
  "mod.ts": "export {};\\n",
  "readme.md": "# WithPermissions\\n\\n> This is the best thing to know! | _created with [\`scaffold\`](https://github.com/ifiokjr/scaffold)_\\n\\n## Contributing\\n\\nTo contribute first update your cache with\\n\\n\`\`\`bash\\ndeno task lock\\n\`\`\`\\n\\nThis both generates the lockfile and makes sure the same cache is used for all contributors.\\n\\nTo check that all you code is working as expected, run:\\n\\n\`\`\`bash\\ndeno task check\\n\`\`\`\\n\\nThis will test, lint and check that formatting is correct.",
  "scripts/cache.ts": 'import { expandGlob, getLogger, parse } from "./deps.ts";\\n\\nconst decoder = new TextDecoder();\\nconst log = getLogger();\\nconst deps: string[] = [];\\nconst args = parse(Deno.args, { boolean: ["reload"] });\\nconst cwd = new URL("..", import.meta.url).pathname;\\nconst iterator = expandGlob("**/deps.ts", { includeDirs: false });\\n\\nfor await (const dep of iterator) {\\n  deps.push(dep.path);\\n}\\n\\nasync function update() {\\n  log.info("Updating the \`lock.json\` file.");\\n\\n  await Deno.run({\\n    cmd: ["deno", "cache", "--lock=lock.json", "--lock-write", ...deps],\\n    stdout: "piped",\\n    cwd,\\n  }).output();\\n}\\n\\nasync function load() {\\n  log.info("Loading the cache from \`lock.json\`.");\\n\\n  const command = Deno.run({\\n    cmd: ["deno", "cache", "--lock=lock.json", "--reload", ...deps],\\n    stdout: "piped",\\n    stderr: "piped",\\n    cwd,\\n  });\\n\\n  const [status, _, stderr] = await Promise.all([\\n    command.status(),\\n    command.output(),\\n    command.stderrOutput(),\\n  ]);\\n  command.close();\\n\\n  if (!status.success) {\\n    const error = decoder.decode(stderr);\\n\\n    if (error.includes("No such file or directory") && !Deno.env.get("CI")) {\\n      log.warning("No \`lock.json\` found. Creating a new one.");\\n      await update();\\n    } else {\\n      log.critical(\\n        "Error while reloading the cache.",\\n        error.split("error: ")[1],\\n      );\\n      Deno.exit(1);\\n    }\\n  }\\n}\\n\\nif (args.reload) {\\n  await load();\\n} else {\\n  await update();\\n}\\n',
  "scripts/deps.ts": 'export { parse } from "https://deno.land/std@0.145.0/flags/mod.ts";\\nexport * from "https://deno.land/std@0.145.0/fs/mod.ts";\\nexport { getLogger } from "https://deno.land/std@0.145.0/log/mod.ts";\\n',
  "src/deps.ts": "export {};\\n",
  "tests/deps.ts": 'export * from "https://deno.land/std@0.145.0/testing/asserts.ts";\\nexport * from "https://deno.land/std@0.145.0/testing/bdd.ts";\\nexport * from "https://deno.land/std@0.145.0/testing/mock.ts";\\nexport * from "https://deno.land/std@0.145.0/testing/snapshot.ts";\\n',
  "tests/mod_test.ts": "import { assertEquals, describe, it } from './deps.ts';\\n\\ndescribe('main', () => {\\n  it('should test', () => {\\n    assertEquals(1, 1);\\n  });\\n});\\n",
}
`;
